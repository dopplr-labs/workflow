openapi: 3.0.0
paths:
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '201':
          description: Returns user object and auth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /auth/signup:
    post:
      operationId: AuthController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Creates a new user in DB and returns user object and auth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /users/me:
    get:
      operationId: UserController_findCurrentUser
      parameters: []
      responses:
        '200':
          description: Me endpoint to validate auth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutSensitiveData'
      security:
        - bearer: []
  /users:
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithoutSensitiveData'
  /issues:
    get:
      operationId: IssuesController_getIssues
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    post:
      operationId: IssuesController_addIssue
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
  /issues/{id}:
    get:
      operationId: IssuesController_getIssue
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
    delete:
      operationId: IssuesController_deleteIssue
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
info:
  title: Workflow API
  description: ''
  version: 1.0.0
  contact: {}
tags: []
servers:
  - url: http://localhost:3001
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    LoginDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 4
          maxLength: 20
      required:
        - email
        - password
    UserWithoutSensitiveData:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        profileImage:
          type: string
          nullable: true
      required:
        - id
        - name
        - email
        - createdAt
        - updatedAt
        - profileImage
    LoginResponseDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserWithoutSensitiveData'
        token:
          type: string
      required:
        - user
        - token
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
          minLength: 4
          maxLength: 20
      required:
        - name
        - email
        - password
